@page "/add-event"
@using TDBA.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject IDbContextFactory<AppDbContext> DbFactory

<h3>Add New Event</h3>
@if (!string.IsNullOrWhiteSpace(Message))
{
    <p style="color: green; font-weight: bold;">@Message</p>
}

<br />



<EditForm Model="@NewEvent" OnValidSubmit="HandleValidSubmit" FormName="TestForm">
    <InputText @bind-Value="NewEvent.Name" />
    <p>Live Preview: @NewEvent.Name</p>
    <button type="submit">Submit</button>
</EditForm>






@*<EditForm Model="@NewEvent" OnValidSubmit="HandleValidSubmit" FormName="AddEventForm">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <label>Event Name:</label>
    <InputText id="Name" @bind-Value="NewEvent.Name" />

    <br />
    <br />

    <label>Age Group:</label>
    <InputSelect id="AgeGroup" @bind-Value="NewEvent.AgeGroup">
        <option value="">-- Select Age Group --</option>
        <option value="1-3">1-3</option>
        <option value="4-6">4-6</option>
        <option value="7-9">7-9</option>
        <option value="10-12">10-12</option>
        <option value="13+">13+</option>
    </InputSelect>

    <br />
    <br />

    <label>Price Range:</label>
    <InputSelect id="PriceRange" @bind-Value="NewEvent.PriceRange">
        <option value="">-- Select Price Range --</option>
        <option value="0">$0</option>
        <option value="$">$</option>
        <option value="$$">$$</option>
        <option value="$$$">$$$</option>
        <option value="$$$$">$$$$</option>
    </InputSelect>

    <br />
    <br />

    <label>Indoor?</label>
    <InputCheckbox id="Indoor" @bind-Value="NewEvent.IsIndoor" />

    <br />
    <br />

    @*TROUBLESHOOTING WITH LIVE PREVIEW*@
    @*HERE<p><strong>Preview:</strong></p>
    <ul>
        <li>Name: @NewEvent.Name</li>
        <li>Age Group: @NewEvent.AgeGroup</li>
        <li>Price Range: @NewEvent.PriceRange</li>
        <li>Is Indoor: @NewEvent.IsIndoor</li>
    </ul>

    <button type="submit">Submit</button>
</EditForm>*@

<hr />

@code {
    //TROUBLESHOOTING WITH TEMP BLOCK
    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"DEBUG - Current Name: {NewEvent.Name}");
    }
    //TS END
    
    private EventModel NewEvent = new EventModel();
    private List<EventModel> Events = new();
    private string Message = string.Empty;

   
    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    
    private async Task LoadEvents()
    {
        using var context = DbFactory.CreateDbContext();
        Events = await context.Events.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Events.Add(NewEvent);
            await context.SaveChangesAsync();

            Message = "Thank you for adding an event!";
            NewEvent = new EventModel();
            await LoadEvents();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    private async Task DeleteEvent(int id)
    {
        using var context = DbFactory.CreateDbContext();
        var eventToDelete = await context.Events.FindAsync(id);

        if (eventToDelete != null)
        {
            context.Events.Remove(eventToDelete);
            await context.SaveChangesAsync();
            Message = "Event deleted.";
            await LoadEvents();
            StateHasChanged();
        }
    }
}



@*
<h3>Event List</h3>

@if (Events is not null && Events.Any())
{
    <table>
        <thead>
            <tr>
                <th>Event Name</th>
                <th>Age Group</th>
                <th>Price Range</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in Events)
            {
                <tr>
                    <td>@eventItem.Name</td>
                    <td>@eventItem.AgeGroup</td>
                    <td>@eventItem.PriceRange</td>
                    <td>@(eventItem.IsIndoor ? "Indoor" : "Outdoor")</td>
                    <td>
                        <button @onclick="() => DeleteEvent(eventItem.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No events available.</p>
}

@code {
    private EventModel NewEvent = new EventModel();
    private List<EventModel> Events = new();
    private string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        using var context = DbFactory.CreateDbContext();
        Events = await context.Events.ToListAsync();
    }

    private async Task DeleteEvent(int id)
    {
        using var context = DbFactory.CreateDbContext();
        var eventToDelete = await context.Events.FindAsync(id);

        if (eventToDelete != null)
        {
            context.Events.Remove(eventToDelete);
            await context.SaveChangesAsync();
            Message = "Event deleted.";
            await LoadEvents();
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Events.Add(NewEvent);
            await context.SaveChangesAsync();

            Message = "Thank you for adding an event!";
            NewEvent = new EventModel();
            await LoadEvents();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
}

*@
